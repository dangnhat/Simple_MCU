module ALU (in1, in2, opcode, func, Cin, result, OV, C, B, T, Z, DIV0);

	parameter word_size = 8; 
	
	input [word_size-1:0] in1, in2; //8bits
	input [4:0] opcode;
	input [1:0] func;
	input Cin;
	
	output reg OV, C;
	output B, T, Z, DIV0;
	output reg [word_size*2-1:0] result; //16bits
	wire aeb, aneb, agb, alb;
	wire ov, c, br; //borrow.
	wire [word_size-1:0] sum, sub, quotient, remain, l_shift, r_shift;
	wire [word_size*2-1:0] product;
	
	parameter ADD 		= 5'B00001; //1 
	parameter SUB 		= 5'B00010; //2
	parameter MUL 		= 5'B00011; //3
	parameter DIV 		= 5'B00100; //4
	parameter AND 		= 5'B00101; //5
	parameter OR 		= 5'B00110; //6
	parameter NOT 		= 5'B00111; //7
	parameter XOR 		= 5'B01000; //8
	parameter S_LEFT 	= 5'B01001; //9
	parameter S_RIGHT = 5'B01010; //A
	parameter COMP 	= 5'B01011; //B
	
	ADD	 		U0(.cin(Cin), .dataa(in1), .datab(in2), .cout(c), .overflow(ov), .result(sum));
	SUB			U1(.dataa(in1), .datab(in2), .result(sub));
	MUL		 	U2(.dataa(in1), .datab(in2), .result(product));
	DIV 			U3(.numer(in1), .denom(in2), .quotient(quotient), .remain(remain));
	COMP 			U4(.dataa(in1), .datab(in2), .aeb(aeb), .aneb(aneb), .agb(agb), .alb(alb));
	SHIFT_LEFT  U5(.dataa(in1), .datab(in2), .result(l_shift));
	SHIFT_RIGHT U6(.dataa(in1), .datab(in2), .result(r_shift));
	
	assign B = borrow(opcode);
	assign T = compare(opcode);
	assign Z = zero(opcode); //zero flag
	assign DIV0 = divide_by_0(opcode);

	always @(in1 or in2 or opcode or sum or sub or product or quotient or remain or l_shift or r_shift or c or ov)
		begin
			case(opcode)
				ADD:
					begin result = sum; OV = ov; C = c; end
				SUB:
					begin result = sub; end
				MUL: 
					begin result = product; end
				DIV: 
					begin result = {remain, quotient}; end
				AND: 
					begin result = in1&in2; end
				OR:
					begin result = in1|in2; end
				NOT:
					begin result = {8'H00, ~in1}; end
				XOR:
					begin result = in1^in2; end
				S_LEFT: 
					begin result = l_shift; end
				S_RIGHT:
					begin result = r_shift; end
				default: begin result = 8'Hxx; end
			endcase
		end
		
		function zero;
			input [4:0] opcode;
			
			if(opcode == 5'B00100) zero = ~|quotient;
			else zero = ~|result;
		endfunction
		
		function compare; 
			input [4:0] opcode;
			
			if(opcode == 5'B01011)
				begin
					if(func == 2'B00) compare = agb;
					else if(func == 2'B01) compare = alb;
					else if(func == 2'B10) compare = aeb;
					else compare = aneb;
				end
			else compare = 0;
		endfunction
		
		function divide_by_0;
			input [4:0] opcode;
			
			if(opcode == 5'B00100 && in2 == 8'H00) divide_by_0 = 1;
			else divide_by_0 = 0;
		endfunction

		function borrow;
			input [4:0] opcode;
			
			if(opcode == 5'B00010 && in2 > in1) borrow = 1;
			else borrow = 0;
		endfunction		
		
endmodule
	